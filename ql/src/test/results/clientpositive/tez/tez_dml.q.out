PREHOOK: query: -- CTAS
EXPLAIN CREATE TABLE tmp_src AS SELECT * FROM (SELECT value, count(value) AS cnt FROM src GROUP BY value) f1 ORDER BY cnt
PREHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: query: -- CTAS
EXPLAIN CREATE TABLE tmp_src AS SELECT * FROM (SELECT value, count(value) AS cnt FROM src GROUP BY value) f1 ORDER BY cnt
POSTHOOK: type: CREATETABLE_AS_SELECT
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-4 depends on stages: Stage-2, Stage-0
  Stage-3 depends on stages: Stage-4
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE)
        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: value (type: string)
                    outputColumnNames: _col0
                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: count(_col0)
                      keys: _col0 (type: string)
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string)
                        sort order: +
                        Map-reduce partition columns: _col0 (type: string)
                        Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col1 (type: bigint)
        Reducer 2 
            Reduce Operator Tree:
              Group By Operator
                aggregations: count(VALUE._col0)
                keys: KEY._col0 (type: string)
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col1 (type: bigint)
                  sort order: +
                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: string)
        Reducer 3 
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), KEY.reducesinkkey0 (type: bigint)
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                      name: default.tmp_src

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-4
      Create Table Operator:
        Create Table
          columns: value string, cnt bigint
          input format: org.apache.hadoop.mapred.TextInputFormat
          output format: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          serde name: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
          name: default.tmp_src

  Stage: Stage-3
    Stats-Aggr Operator

  Stage: Stage-0
    Move Operator
      files:
          hdfs directory: true
#### A masked pattern was here ####

PREHOOK: query: CREATE TABLE tmp_src AS SELECT * FROM (SELECT value, count(value) AS cnt FROM src GROUP BY value) f1 ORDER BY cnt
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src
PREHOOK: Output: database:default
PREHOOK: Output: default@tmp_src
POSTHOOK: query: CREATE TABLE tmp_src AS SELECT * FROM (SELECT value, count(value) AS cnt FROM src GROUP BY value) f1 ORDER BY cnt
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tmp_src
PREHOOK: query: SELECT * FROM tmp_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tmp_src
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM tmp_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tmp_src
#### A masked pattern was here ####
val_490	1
val_287	1
val_286	1
val_285	1
val_284	1
val_283	1
val_114	1
val_487	1
val_485	1
val_28	1
val_484	1
val_181	1
val_275	1
val_274	1
val_183	1
val_483	1
val_27	1
val_266	1
val_482	1
val_263	1
val_262	1
val_260	1
val_481	1
val_258	1
val_257	1
val_116	1
val_479	1
val_252	1
val_249	1
val_248	1
val_247	1
val_244	1
val_92	1
val_241	1
val_477	1
val_475	1
val_472	1
val_470	1
val_235	1
val_47	1
val_186	1
val_126	1
val_228	1
val_226	1
val_131	1
val_467	1
val_222	1
val_133	1
val_82	1
val_218	1
val_80	1
val_460	1
val_214	1
val_8	1
val_78	1
val_189	1
val_457	1
val_455	1
val_136	1
val_202	1
val_201	1
val_453	1
val_20	1
val_2	1
val_19	1
val_452	1
val_196	1
val_449	1
val_194	1
val_190	1
val_192	1
val_448	1
val_446	1
val_444	1
val_443	1
val_44	1
val_77	1
val_143	1
val_437	1
val_436	1
val_435	1
val_432	1
val_145	1
val_150	1
val_43	1
val_10	1
val_427	1
val_74	1
val_421	1
val_9	1
val_419	1
val_418	1
val_153	1
val_105	1
val_69	1
val_411	1
val_41	1
val_155	1
val_407	1
val_156	1
val_87	1
val_157	1
val_402	1
val_158	1
val_400	1
val_4	1
val_66	1
val_65	1
val_160	1
val_64	1
val_394	1
val_393	1
val_392	1
val_389	1
val_386	1
val_162	1
val_86	1
val_379	1
val_378	1
val_377	1
val_375	1
val_374	1
val_373	1
val_57	1
val_163	1
val_368	1
val_54	1
val_366	1
val_365	1
val_364	1
val_362	1
val_360	1
val_356	1
val_53	1
val_351	1
val_166	1
val_168	1
val_345	1
val_85	1
val_11	1
val_341	1
val_34	1
val_339	1
val_338	1
val_336	1
val_335	1
val_111	1
val_332	1
val_497	1
val_33	1
val_17	1
val_496	1
val_323	1
val_495	1
val_494	1
val_170	1
val_493	1
val_177	1
val_315	1
val_178	1
val_310	1
val_96	1
val_308	1
val_491	1
val_306	1
val_305	1
val_302	1
val_30	1
val_180	1
val_296	1
val_292	1
val_291	1
val_289	1
val_98	2
val_97	2
val_95	2
val_84	2
val_83	2
val_76	2
val_72	2
val_67	2
val_58	2
val_51	2
val_492	2
val_478	2
val_463	2
val_462	2
val_459	2
val_458	2
val_439	2
val_429	2
val_424	2
val_42	2
val_414	2
val_413	2
val_404	2
val_399	2
val_397	2
val_395	2
val_382	2
val_37	2
val_367	2
val_353	2
val_344	2
val_342	2
val_333	2
val_331	2
val_325	2
val_322	2
val_321	2
val_317	2
val_309	2
val_307	2
val_288	2
val_282	2
val_281	2
val_280	2
val_278	2
val_272	2
val_265	2
val_26	2
val_256	2
val_255	2
val_242	2
val_24	2
val_239	2
val_238	2
val_237	2
val_233	2
val_229	2
val_224	2
val_223	2
val_221	2
val_219	2
val_217	2
val_216	2
val_213	2
val_209	2
val_207	2
val_205	2
val_203	2
val_200	2
val_197	2
val_195	2
val_191	2
val_18	2
val_179	2
val_176	2
val_175	2
val_174	2
val_172	2
val_165	2
val_164	2
val_152	2
val_15	2
val_149	2
val_146	2
val_137	2
val_134	2
val_129	2
val_125	2
val_120	2
val_12	2
val_118	2
val_113	2
val_104	2
val_103	2
val_100	2
val_498	3
val_369	3
val_384	3
val_396	3
val_403	3
val_409	3
val_417	3
val_5	3
val_430	3
val_70	3
val_119	3
val_0	3
val_431	3
val_438	3
val_480	3
val_193	3
val_199	3
val_208	3
val_187	3
val_273	3
val_298	3
val_454	3
val_311	3
val_316	3
val_466	3
val_90	3
val_128	3
val_318	3
val_327	3
val_167	3
val_35	3
val_468	4
val_489	4
val_406	4
val_169	4
val_138	4
val_277	4
val_469	5
val_401	5
val_230	5
val_348	5
PREHOOK: query: -- dyn partitions
CREATE TABLE tmp_src_part (c string) PARTITIONED BY (d int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tmp_src_part
POSTHOOK: query: -- dyn partitions
CREATE TABLE tmp_src_part (c string) PARTITIONED BY (d int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tmp_src_part
PREHOOK: query: EXPLAIN INSERT INTO TABLE tmp_src_part PARTITION (d) SELECT * FROM tmp_src
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN INSERT INTO TABLE tmp_src_part PARTITION (d) SELECT * FROM tmp_src
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 depends on stages: Stage-2
  Stage-3 depends on stages: Stage-0

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: tmp_src
                  Statistics: Num rows: 309 Data size: 2718 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: value (type: string), cnt (type: bigint)
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 309 Data size: 2718 Basic stats: COMPLETE Column stats: NONE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 309 Data size: 2718 Basic stats: COMPLETE Column stats: NONE
                      table:
                          input format: org.apache.hadoop.mapred.TextInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                          name: default.tmp_src_part

  Stage: Stage-2
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          partition:
            d 
          replace: false
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.tmp_src_part

  Stage: Stage-3
    Stats-Aggr Operator

PREHOOK: query: INSERT INTO TABLE tmp_src_part PARTITION (d) SELECT * FROM tmp_src
PREHOOK: type: QUERY
PREHOOK: Input: default@tmp_src
PREHOOK: Output: default@tmp_src_part
POSTHOOK: query: INSERT INTO TABLE tmp_src_part PARTITION (d) SELECT * FROM tmp_src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tmp_src
POSTHOOK: Output: default@tmp_src_part@d=1
POSTHOOK: Output: default@tmp_src_part@d=2
POSTHOOK: Output: default@tmp_src_part@d=3
POSTHOOK: Output: default@tmp_src_part@d=4
POSTHOOK: Output: default@tmp_src_part@d=5
POSTHOOK: Lineage: tmp_src_part PARTITION(d=1).c SIMPLE [(tmp_src)tmp_src.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: tmp_src_part PARTITION(d=2).c SIMPLE [(tmp_src)tmp_src.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: tmp_src_part PARTITION(d=3).c SIMPLE [(tmp_src)tmp_src.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: tmp_src_part PARTITION(d=4).c SIMPLE [(tmp_src)tmp_src.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: tmp_src_part PARTITION(d=5).c SIMPLE [(tmp_src)tmp_src.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM tmp_src_part
PREHOOK: type: QUERY
PREHOOK: Input: default@tmp_src_part
PREHOOK: Input: default@tmp_src_part@d=1
PREHOOK: Input: default@tmp_src_part@d=2
PREHOOK: Input: default@tmp_src_part@d=3
PREHOOK: Input: default@tmp_src_part@d=4
PREHOOK: Input: default@tmp_src_part@d=5
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM tmp_src_part
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tmp_src_part
POSTHOOK: Input: default@tmp_src_part@d=1
POSTHOOK: Input: default@tmp_src_part@d=2
POSTHOOK: Input: default@tmp_src_part@d=3
POSTHOOK: Input: default@tmp_src_part@d=4
POSTHOOK: Input: default@tmp_src_part@d=5
#### A masked pattern was here ####
val_490	1
val_287	1
val_286	1
val_285	1
val_284	1
val_283	1
val_114	1
val_487	1
val_485	1
val_28	1
val_484	1
val_181	1
val_275	1
val_274	1
val_183	1
val_483	1
val_27	1
val_266	1
val_482	1
val_263	1
val_262	1
val_260	1
val_481	1
val_258	1
val_257	1
val_116	1
val_479	1
val_252	1
val_249	1
val_248	1
val_247	1
val_244	1
val_92	1
val_241	1
val_477	1
val_475	1
val_472	1
val_470	1
val_235	1
val_47	1
val_186	1
val_126	1
val_228	1
val_226	1
val_131	1
val_467	1
val_222	1
val_133	1
val_82	1
val_218	1
val_80	1
val_460	1
val_214	1
val_8	1
val_78	1
val_189	1
val_457	1
val_455	1
val_136	1
val_202	1
val_201	1
val_453	1
val_20	1
val_2	1
val_19	1
val_452	1
val_196	1
val_449	1
val_194	1
val_190	1
val_192	1
val_448	1
val_446	1
val_444	1
val_443	1
val_44	1
val_77	1
val_143	1
val_437	1
val_436	1
val_435	1
val_432	1
val_145	1
val_150	1
val_43	1
val_10	1
val_427	1
val_74	1
val_421	1
val_9	1
val_419	1
val_418	1
val_153	1
val_105	1
val_69	1
val_411	1
val_41	1
val_155	1
val_407	1
val_156	1
val_87	1
val_157	1
val_402	1
val_158	1
val_400	1
val_4	1
val_66	1
val_65	1
val_160	1
val_64	1
val_394	1
val_393	1
val_392	1
val_389	1
val_386	1
val_162	1
val_86	1
val_379	1
val_378	1
val_377	1
val_375	1
val_374	1
val_373	1
val_57	1
val_163	1
val_368	1
val_54	1
val_366	1
val_365	1
val_364	1
val_362	1
val_360	1
val_356	1
val_53	1
val_351	1
val_166	1
val_168	1
val_345	1
val_85	1
val_11	1
val_341	1
val_34	1
val_339	1
val_338	1
val_336	1
val_335	1
val_111	1
val_332	1
val_497	1
val_33	1
val_17	1
val_496	1
val_323	1
val_495	1
val_494	1
val_170	1
val_493	1
val_177	1
val_315	1
val_178	1
val_310	1
val_96	1
val_308	1
val_491	1
val_306	1
val_305	1
val_302	1
val_30	1
val_180	1
val_296	1
val_292	1
val_291	1
val_289	1
val_98	2
val_97	2
val_95	2
val_84	2
val_83	2
val_76	2
val_72	2
val_67	2
val_58	2
val_51	2
val_492	2
val_478	2
val_463	2
val_462	2
val_459	2
val_458	2
val_439	2
val_429	2
val_424	2
val_42	2
val_414	2
val_413	2
val_404	2
val_399	2
val_397	2
val_395	2
val_382	2
val_37	2
val_367	2
val_353	2
val_344	2
val_342	2
val_333	2
val_331	2
val_325	2
val_322	2
val_321	2
val_317	2
val_309	2
val_307	2
val_288	2
val_282	2
val_281	2
val_280	2
val_278	2
val_272	2
val_265	2
val_26	2
val_256	2
val_255	2
val_242	2
val_24	2
val_239	2
val_238	2
val_237	2
val_233	2
val_229	2
val_224	2
val_223	2
val_221	2
val_219	2
val_217	2
val_216	2
val_213	2
val_209	2
val_207	2
val_205	2
val_203	2
val_200	2
val_197	2
val_195	2
val_191	2
val_18	2
val_179	2
val_176	2
val_175	2
val_174	2
val_172	2
val_165	2
val_164	2
val_152	2
val_15	2
val_149	2
val_146	2
val_137	2
val_134	2
val_129	2
val_125	2
val_120	2
val_12	2
val_118	2
val_113	2
val_104	2
val_103	2
val_100	2
val_498	3
val_369	3
val_384	3
val_396	3
val_403	3
val_409	3
val_417	3
val_5	3
val_430	3
val_70	3
val_119	3
val_0	3
val_431	3
val_438	3
val_480	3
val_193	3
val_199	3
val_208	3
val_187	3
val_273	3
val_298	3
val_454	3
val_311	3
val_316	3
val_466	3
val_90	3
val_128	3
val_318	3
val_327	3
val_167	3
val_35	3
val_468	4
val_489	4
val_406	4
val_169	4
val_138	4
val_277	4
val_469	5
val_401	5
val_230	5
val_348	5
PREHOOK: query: -- multi insert
CREATE TABLE even (c int, d string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@even
POSTHOOK: query: -- multi insert
CREATE TABLE even (c int, d string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@even
PREHOOK: query: CREATE TABLE odd (c int, d string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@odd
POSTHOOK: query: CREATE TABLE odd (c int, d string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@odd
PREHOOK: query: EXPLAIN
FROM src
INSERT INTO TABLE even SELECT key, value WHERE key % 2 = 0 
INSERT INTO TABLE odd SELECT key, value WHERE key % 2 = 1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
FROM src
INSERT INTO TABLE even SELECT key, value WHERE key % 2 = 0 
INSERT INTO TABLE odd SELECT key, value WHERE key % 2 = 1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-2 is a root stage
  Stage-3 depends on stages: Stage-2
  Stage-0 depends on stages: Stage-3
  Stage-4 depends on stages: Stage-0
  Stage-1 depends on stages: Stage-3
  Stage-5 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-2
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: src
                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: ((key % 2) = 0) (type: boolean)
                    Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: UDFToInteger(key) (type: int), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.even
                  Filter Operator
                    predicate: ((key % 2) = 1) (type: boolean)
                    Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: UDFToInteger(key) (type: int), value (type: string)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                      File Output Operator
                        compressed: false
                        Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                        table:
                            input format: org.apache.hadoop.mapred.TextInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                            name: default.odd

  Stage: Stage-3
    Dependency Collection

  Stage: Stage-0
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.even

  Stage: Stage-4
    Stats-Aggr Operator

  Stage: Stage-1
    Move Operator
      tables:
          replace: false
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: default.odd

  Stage: Stage-5
    Stats-Aggr Operator

PREHOOK: query: FROM src
INSERT INTO TABLE even SELECT key, value WHERE key % 2 = 0 
INSERT INTO TABLE odd SELECT key, value WHERE key % 2 = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@even
PREHOOK: Output: default@odd
POSTHOOK: query: FROM src
INSERT INTO TABLE even SELECT key, value WHERE key % 2 = 0 
INSERT INTO TABLE odd SELECT key, value WHERE key % 2 = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@even
POSTHOOK: Output: default@odd
POSTHOOK: Lineage: even.c EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: even.d SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
POSTHOOK: Lineage: odd.c EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: odd.d SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: SELECT * FROM even
PREHOOK: type: QUERY
PREHOOK: Input: default@even
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM even
POSTHOOK: type: QUERY
POSTHOOK: Input: default@even
#### A masked pattern was here ####
238	val_238
86	val_86
278	val_278
98	val_98
484	val_484
150	val_150
224	val_224
66	val_66
128	val_128
146	val_146
406	val_406
374	val_374
152	val_152
82	val_82
166	val_166
430	val_430
252	val_252
292	val_292
338	val_338
446	val_446
394	val_394
482	val_482
174	val_174
494	val_494
466	val_466
208	val_208
174	val_174
396	val_396
162	val_162
266	val_266
342	val_342
0	val_0
128	val_128
316	val_316
302	val_302
438	val_438
170	val_170
20	val_20
378	val_378
92	val_92
72	val_72
4	val_4
280	val_280
208	val_208
356	val_356
382	val_382
498	val_498
386	val_386
192	val_192
286	val_286
176	val_176
54	val_54
138	val_138
216	val_216
430	val_430
278	val_278
176	val_176
318	val_318
332	val_332
180	val_180
284	val_284
12	val_12
230	val_230
260	val_260
404	val_404
384	val_384
272	val_272
138	val_138
84	val_84
348	val_348
466	val_466
58	val_58
8	val_8
230	val_230
208	val_208
348	val_348
24	val_24
172	val_172
42	val_42
158	val_158
496	val_496
0	val_0
322	val_322
468	val_468
454	val_454
100	val_100
298	val_298
418	val_418
96	val_96
26	val_26
230	val_230
120	val_120
404	val_404
436	val_436
156	val_156
468	val_468
308	val_308
196	val_196
288	val_288
98	val_98
282	val_282
318	val_318
318	val_318
470	val_470
316	val_316
0	val_0
490	val_490
364	val_364
118	val_118
134	val_134
282	val_282
138	val_138
238	val_238
118	val_118
72	val_72
90	val_90
10	val_10
306	val_306
224	val_224
242	val_242
392	val_392
272	val_272
242	val_242
452	val_452
226	val_226
402	val_402
396	val_396
58	val_58
336	val_336
168	val_168
34	val_34
472	val_472
322	val_322
498	val_498
160	val_160
42	val_42
430	val_430
458	val_458
78	val_78
76	val_76
492	val_492
218	val_218
228	val_228
138	val_138
30	val_30
64	val_64
468	val_468
76	val_76
74	val_74
342	val_342
230	val_230
368	val_368
296	val_296
216	val_216
344	val_344
274	val_274
116	val_116
256	val_256
70	val_70
480	val_480
288	val_288
244	val_244
438	val_438
128	val_128
432	val_432
202	val_202
316	val_316
280	val_280
2	val_2
80	val_80
44	val_44
104	val_104
466	val_466
366	val_366
406	val_406
190	val_190
406	val_406
114	val_114
258	val_258
90	val_90
262	val_262
348	val_348
424	val_424
12	val_12
396	val_396
164	val_164
454	val_454
478	val_478
298	val_298
164	val_164
424	val_424
382	val_382
70	val_70
480	val_480
24	val_24
104	val_104
70	val_70
438	val_438
414	val_414
200	val_200
360	val_360
248	val_248
444	val_444
120	val_120
230	val_230
478	val_478
178	val_178
468	val_468
310	val_310
460	val_460
480	val_480
136	val_136
172	val_172
214	val_214
462	val_462
406	val_406
454	val_454
384	val_384
256	val_256
26	val_26
134	val_134
384	val_384
18	val_18
462	val_462
492	val_492
100	val_100
298	val_298
498	val_498
146	val_146
458	val_458
362	val_362
186	val_186
348	val_348
18	val_18
344	val_344
84	val_84
28	val_28
448	val_448
152	val_152
348	val_348
194	val_194
414	val_414
222	val_222
126	val_126
90	val_90
400	val_400
200	val_200
PREHOOK: query: SELECT * FROM odd
PREHOOK: type: QUERY
PREHOOK: Input: default@odd
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM odd
POSTHOOK: type: QUERY
POSTHOOK: Input: default@odd
#### A masked pattern was here ####
311	val_311
27	val_27
165	val_165
409	val_409
255	val_255
265	val_265
193	val_193
401	val_401
273	val_273
369	val_369
213	val_213
429	val_429
469	val_469
145	val_145
495	val_495
37	val_37
327	val_327
281	val_281
277	val_277
209	val_209
15	val_15
403	val_403
417	val_417
219	val_219
287	val_287
153	val_153
193	val_193
459	val_459
237	val_237
413	val_413
207	val_207
199	val_199
399	val_399
247	val_247
417	val_417
489	val_489
377	val_377
397	val_397
309	val_309
365	val_365
439	val_439
367	val_367
325	val_325
167	val_167
195	val_195
475	val_475
17	val_17
113	val_113
155	val_155
203	val_203
339	val_339
455	val_455
311	val_311
57	val_57
205	val_205
149	val_149
345	val_345
129	val_129
489	val_489
157	val_157
221	val_221
111	val_111
47	val_47
35	val_35
427	val_427
277	val_277
399	val_399
169	val_169
125	val_125
437	val_437
469	val_469
187	val_187
459	val_459
51	val_51
103	val_103
239	val_239
213	val_213
289	val_289
221	val_221
65	val_65
311	val_311
275	val_275
137	val_137
241	val_241
83	val_83
333	val_333
181	val_181
67	val_67
489	val_489
353	val_353
373	val_373
217	val_217
411	val_411
463	val_463
431	val_431
179	val_179
129	val_129
119	val_119
197	val_197
393	val_393
199	val_199
191	val_191
165	val_165
327	val_327
205	val_205
131	val_131
51	val_51
43	val_43
469	val_469
95	val_95
481	val_481
457	val_457
197	val_197
187	val_187
409	val_409
137	val_137
369	val_369
169	val_169
413	val_413
85	val_85
77	val_77
87	val_87
179	val_179
395	val_395
419	val_419
15	val_15
307	val_307
19	val_19
435	val_435
277	val_277
273	val_273
309	val_309
389	val_389
327	val_327
369	val_369
331	val_331
401	val_401
177	val_177
5	val_5
497	val_497
317	val_317
395	val_395
35	val_35
95	val_95
11	val_11
229	val_229
233	val_233
143	val_143
195	val_195
321	val_321
119	val_119
489	val_489
41	val_41
223	val_223
149	val_149
449	val_449
453	val_453
209	val_209
69	val_69
33	val_33
103	val_103
113	val_113
367	val_367
167	val_167
219	val_219
239	val_239
485	val_485
223	val_223
263	val_263
487	val_487
401	val_401
191	val_191
5	val_5
467	val_467
229	val_229
469	val_469
463	val_463
35	val_35
283	val_283
331	val_331
235	val_235
193	val_193
321	val_321
335	val_335
175	val_175
403	val_403
483	val_483
53	val_53
105	val_105
257	val_257
409	val_409
401	val_401
203	val_203
201	val_201
217	val_217
431	val_431
125	val_125
431	val_431
187	val_187
5	val_5
397	val_397
291	val_291
351	val_351
255	val_255
163	val_163
119	val_119
491	val_491
237	val_237
439	val_439
479	val_479
305	val_305
417	val_417
199	val_199
429	val_429
169	val_169
443	val_443
323	val_323
325	val_325
277	val_277
317	val_317
333	val_333
493	val_493
207	val_207
249	val_249
265	val_265
83	val_83
353	val_353
233	val_233
133	val_133
175	val_175
189	val_189
375	val_375
401	val_401
421	val_421
407	val_407
67	val_67
379	val_379
9	val_9
341	val_341
285	val_285
167	val_167
273	val_273
183	val_183
281	val_281
97	val_97
469	val_469
315	val_315
37	val_37
307	val_307
477	val_477
169	val_169
403	val_403
97	val_97
PREHOOK: query: -- create empty table
CREATE TABLE empty STORED AS orc AS SELECT * FROM tmp_src_part WHERE d = -1000
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@tmp_src_part
PREHOOK: Output: database:default
PREHOOK: Output: default@empty
POSTHOOK: query: -- create empty table
CREATE TABLE empty STORED AS orc AS SELECT * FROM tmp_src_part WHERE d = -1000
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@tmp_src_part
POSTHOOK: Output: database:default
POSTHOOK: Output: default@empty
PREHOOK: query: SELECT * FROM empty
PREHOOK: type: QUERY
PREHOOK: Input: default@empty
#### A masked pattern was here ####
POSTHOOK: query: SELECT * FROM empty
POSTHOOK: type: QUERY
POSTHOOK: Input: default@empty
#### A masked pattern was here ####
PREHOOK: query: -- drop the tables
DROP TABLE even
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@even
PREHOOK: Output: default@even
POSTHOOK: query: -- drop the tables
DROP TABLE even
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@even
POSTHOOK: Output: default@even
PREHOOK: query: DROP TABLE odd
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@odd
PREHOOK: Output: default@odd
POSTHOOK: query: DROP TABLE odd
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@odd
POSTHOOK: Output: default@odd
PREHOOK: query: DROP TABLE tmp_src
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@tmp_src
PREHOOK: Output: default@tmp_src
POSTHOOK: query: DROP TABLE tmp_src
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@tmp_src
POSTHOOK: Output: default@tmp_src
PREHOOK: query: DROP TABLE tmp_src_part
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@tmp_src_part
PREHOOK: Output: default@tmp_src_part
POSTHOOK: query: DROP TABLE tmp_src_part
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@tmp_src_part
POSTHOOK: Output: default@tmp_src_part
